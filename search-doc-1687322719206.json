[{"title":"NDArray::array","type":0,"sectionRef":"#","url":"/api/initializers/ndarray-array","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::array","url":"/api/initializers/ndarray-array#parameters","content":""},{"title":"$array​","type":1,"pageTitle":"NDArray::array","url":"/api/initializers/ndarray-array#array","content":"Type array[long|double,] The PHP array to be converted to a NDArray  "},{"title":"Return​","type":1,"pageTitle":"NDArray::array","url":"/api/initializers/ndarray-array#return","content":"Type - NDArray A single-precision (float32) NDArray with the same shape and values of $array  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::array","url":"/api/initializers/ndarray-array#notes","content":"note Every floating point in PHP is a double precision (float64) so some precision may be lost during conversion.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::array","url":"/api/initializers/ndarray-array#examples","content":"Example 1 use \\NDArray as nd; $a = nd::array([[1, 2], [3, 4]]); print_r($a); [[1, 2], [3, 4]]   "},{"title":"NDArray::ones","type":0,"sectionRef":"#","url":"/api/initializers/ndarray-ones","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::ones","url":"/api/initializers/ndarray-ones#parameters","content":""},{"title":"$shape​","type":1,"pageTitle":"NDArray::ones","url":"/api/initializers/ndarray-ones#shape","content":"Type array[long,] The shape parameter can be a sequence of integers, indicating the dimensions of the array  "},{"title":"Return​","type":1,"pageTitle":"NDArray::ones","url":"/api/initializers/ndarray-ones#return","content":"Type - NDArray Return an array of shape $shape filles with ones. "},{"title":"NDArray::identity","type":0,"sectionRef":"#","url":"/api/initializers/ndarray-identity","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::identity","url":"/api/initializers/ndarray-identity#parameters","content":""},{"title":"$size​","type":1,"pageTitle":"NDArray::identity","url":"/api/initializers/ndarray-identity#size","content":"Type long Number of rows and columns of the new square array of size ($size, $size)  "},{"title":"Return​","type":1,"pageTitle":"NDArray::identity","url":"/api/initializers/ndarray-identity#return","content":"Type - NDArray Return a new square array of size ($size, $size)  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::identity","url":"/api/initializers/ndarray-identity#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = nd::identity(10); print_r($a); [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]   "},{"title":"Exceptions​","type":1,"pageTitle":"NDArray::identity","url":"/api/initializers/ndarray-identity#exceptions","content":"If $size is less than 0 a Fatal error will be raised Fatal error: Uncaught Error: negative dimensions are not allowed in /src/test.php:4  "},{"title":"NDArray::zeros","type":0,"sectionRef":"#","url":"/api/initializers/ndarray-zeros","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::zeros","url":"/api/initializers/ndarray-zeros#parameters","content":""},{"title":"$shape​","type":1,"pageTitle":"NDArray::zeros","url":"/api/initializers/ndarray-zeros#shape","content":"Type array[long,] The shape parameter can be a sequence of integers, indicating the dimensions of the array  "},{"title":"Return​","type":1,"pageTitle":"NDArray::zeros","url":"/api/initializers/ndarray-zeros#return","content":"Type - NDArray Return an array of shape $shape filled with zeros. "},{"title":"NumPower API","type":0,"sectionRef":"#","url":"/api/intro","content":"","keywords":""},{"title":"How This API Documentation is Organized​","type":1,"pageTitle":"NumPower API","url":"/api/intro#how-this-api-documentation-is-organized","content":"This API documentation is divided into various categories to help you find the information you need effectively: Math: This section encompasses all mathematical functions provided by NumPower, including arithmetic and trigonometric operations. Initializers: Learn about the multiple ways to initialize arrays in NumPower, with functions to create arrays from existing data or initialize arrays with preset values. Linear Algebra: Dive into the functions associated with linear algebra operations, such as matrix multiplication, determinants, solving linear equations, among others. Logic Functions: This category includes functions for evaluating logical statements, including logical AND, OR, NOT operations, and comparison operations. Manipulation: Understand more about the functions that allow you to alter the shape, size, and structure of NumPower arrays. Random: Explore the functions provided by NumPower for generating arrays of random numbers, drawn from various probability distributions. Statistics: This part houses statistical functions for operations such as averages, medians and variances. Low-level Debug: This section includes functions and methods to assist in debugging, such as setting test validators, configuring the logger, and examining the state of the random number generator. Whether you're a beginner embarking on your journey in numerical computing, a developer eager to incorporate numerical computing into your AI projects, or an ML enthusiast keen on leveraging PHP, this documentation will help you navigate NumPower effectively. As the NumPower community grows and the library evolves, we remain committed to keeping this documentation comprehensive, up-to-date, and user-friendly. "},{"title":"NDArray::cholesky","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-cholesky","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::cholesky","url":"/api/linear-algebra/ndarray-cholesky#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::det","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-det","content":"","keywords":""},{"title":"NDArray::cond","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-cond","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::cond","url":"/api/linear-algebra/ndarray-cond#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"Notes​","type":1,"pageTitle":"NDArray::det","url":"/api/linear-algebra/ndarray-det#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::eig","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-eig","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::eig","url":"/api/linear-algebra/ndarray-eig#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::dot","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-dot","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::dot","url":"/api/linear-algebra/ndarray-dot#parameters","content":""},{"title":"$a $b​","type":1,"pageTitle":"NDArray::dot","url":"/api/linear-algebra/ndarray-dot#a-b","content":"Type NDArray|array|long|double The arrays to perfom the dot product.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::dot","url":"/api/linear-algebra/ndarray-dot#return","content":"Type - NDArray If both $a and $b are scalars or 1-D arrays, the dot product operation yields a scalar value. In this case, a single scalar is returned as the result.If either $a or $b is a scalar and the other is an array, or if both $a and $b are arrays with any dimensionality greater than 1, the dot product operation results in an array. The returned array will have a shape determined by the dimensions of $a and $b according to the dot product rules.  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::dot","url":"/api/linear-algebra/ndarray-dot#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::dot","url":"/api/linear-algebra/ndarray-dot#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = nd::array([[1, 2],[3, 4]]); $b = nd::array([1, 2]); $result = nd::dot($a, $b); print_r($result); [5, 11]  "},{"title":"NDArray::inner","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-inner","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::inner","url":"/api/linear-algebra/ndarray-inner#parameters","content":""},{"title":"$a $b​","type":1,"pageTitle":"NDArray::inner","url":"/api/linear-algebra/ndarray-inner#a-b","content":"Type NDArray|array|long|double The arrays to perfom the inner product.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::inner","url":"/api/linear-algebra/ndarray-inner#return","content":"Type NDArray If both $a and $b are scalars or 1-D arrays, the function will return a scalar value. Otherwise, if the input arrays have more than one dimension, an array will be returned.  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::inner","url":"/api/linear-algebra/ndarray-inner#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::inner","url":"/api/linear-algebra/ndarray-inner#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = nd::array([2, -2, 3]); $b = nd::array([1, -1.5, 3]); $result = nd::inner($a, $b); print_r($result); 14  "},{"title":"NDArray::inv","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-inv","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::inv","url":"/api/linear-algebra/ndarray-inv#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::lstsq","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-lstsq","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::lstsq","url":"/api/linear-algebra/ndarray-lstsq#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::lu","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-lu","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::lu","url":"/api/linear-algebra/ndarray-lu#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::matmul","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-matmul","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::matmul","url":"/api/linear-algebra/ndarray-matmul#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::outer","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-outer","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::outer","url":"/api/linear-algebra/ndarray-outer#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::norm","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-norm","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::norm","url":"/api/linear-algebra/ndarray-norm#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::qr","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-qr","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::qr","url":"/api/linear-algebra/ndarray-qr#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::solve","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-solve","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::solve","url":"/api/linear-algebra/ndarray-solve#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::svd","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-svd","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::svd","url":"/api/linear-algebra/ndarray-svd#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::trace","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-trace","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::trace","url":"/api/linear-algebra/ndarray-trace#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::all","type":0,"sectionRef":"#","url":"/api/logic/ndarray-all","content":"NDArray::all","keywords":""},{"title":"NDArray::equal","type":0,"sectionRef":"#","url":"/api/logic/ndarray-equal","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::equal","url":"/api/logic/ndarray-equal#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::dump","type":0,"sectionRef":"#","url":"/api/low-level-debug/ndarray-dump","content":"","keywords":""},{"title":"Examples​","type":1,"pageTitle":"NDArray::dump","url":"/api/low-level-debug/ndarray-dump#examples","content":"Example 1 use \\NDArray as nd; $a = nd::array([[1, 2, 3, 4]]); $a-&gt;dump(); Output ================================================= NDArray.uuid 0 NDArray.dims [ 1 4 ] NDArray.strides [ 16 4 ] NDArray.ndim 2 NDArray.device CPU NDArray.refcount 1 NDArray.descriptor.elsize 4 NDArray.descriptor.numElements 4 NDArray.descriptor.type float32 =================================================  "},{"title":"NDArray::atleast_1d","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-atleast_1d","content":"NDArray::atleast_1d","keywords":""},{"title":"NDArray::dumpDevices","type":0,"sectionRef":"#","url":"/api/low-level-debug/ndarray-dumpDevices","content":"","keywords":""},{"title":"Examples​","type":1,"pageTitle":"NDArray::dumpDevices","url":"/api/low-level-debug/ndarray-dumpDevices#examples","content":"Example 1 use \\NDArray as nd; nd::dumpDevices(); Output ============================================================================== Number of CUDA devices: 1 --------------------------------------------------------------------------- Device 0: NVIDIA GeForce RTX 2070 SUPER Compute capability: 7.5 Total global memory: 8358854656 bytes Max threads per block: 1024 Max threads in X-dimension of block: 1024 Max threads in Y-dimension of block: 1024 Max threads in Z-dimension of block: 64 Max grid size in X-dimension: 2147483647 Max grid size in Y-dimension: 65535 Max grid size in Z-dimension: 65535 Max grid size in Z-dimension: 65535 Max grid size in Z-dimension: 65535 Max grid size in Z-dimension: 65535 --------------------------------------------------------------------------- ==============================================================================  "},{"title":"NDArray::atleast_3d","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-atleast_3d","content":"NDArray::atleast_3d","keywords":""},{"title":"NDArray::atleast_2d","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-atleast_2d","content":"NDArray::atleast_2d","keywords":""},{"title":"NDArray::copy","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-copy","content":"NDArray::copy","keywords":""},{"title":"NDArray::flatten","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-flat","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::flatten","url":"/api/manipulation/ndarray-flat#parameters","content":""},{"title":"$a​","type":1,"pageTitle":"NDArray::flatten","url":"/api/manipulation/ndarray-flat#a","content":"Type NDArray array scalar Target array  "},{"title":"Return​","type":1,"pageTitle":"NDArray::flatten","url":"/api/manipulation/ndarray-flat#return","content":"Type - NDArray A copy of $a, with dimensions collapsed to 1-d, in the same device. "},{"title":"Notes​","type":1,"pageTitle":"NDArray::flatten","url":"/api/manipulation/ndarray-flat#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::cpu","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-cpu","content":"","keywords":""},{"title":"Return​","type":1,"pageTitle":"NDArray::cpu","url":"/api/manipulation/ndarray-cpu#return","content":"Type NDArray A copy of the NDArray but stored in RAM.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::cpu","url":"/api/manipulation/ndarray-cpu#examples","content":"Example 1 use \\NDArray as nd; $a_gpu = nd::array([2, -2, 3])-&gt;gpu(); $a_cpu = $a-&gt;cpu(); $a_gpu-&gt;dump(); $a_cpu-&gt;dump(); Output ================================================= NDArray.uuid 0 NDArray.dims [ 3 ] NDArray.strides [ 4 ] NDArray.ndim 1 NDArray.device GPU NDArray.refcount 1 NDArray.descriptor.elsize 4 NDArray.descriptor.numElements 3 NDArray.descriptor.type float32 ================================================= ================================================= NDArray.uuid 1 NDArray.dims [ 3 ] NDArray.strides [ 4 ] NDArray.ndim 1 NDArray.device CPU NDArray.refcount 1 NDArray.descriptor.elsize 4 NDArray.descriptor.numElements 3 NDArray.descriptor.type float32 =================================================  "},{"title":"NDArray::reshape","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-reshape","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::reshape","url":"/api/manipulation/ndarray-reshape#parameters","content":""},{"title":"$shape​","type":1,"pageTitle":"NDArray::reshape","url":"/api/manipulation/ndarray-reshape#shape","content":"Type array The new shape of the NDArray.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::reshape","url":"/api/manipulation/ndarray-reshape#return","content":"Type - NDArray Return a view of the array with shape $shape. To be compatible, the new shape must have the same amount of elements as the old one. "},{"title":"NDArray::shape","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-shape","content":"NDArray::shape","keywords":""},{"title":"NDArray::toArray","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-toArray","content":"NDArray::toArray","keywords":""},{"title":"NDArray::gpu","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-gpu","content":"","keywords":""},{"title":"Return​","type":1,"pageTitle":"NDArray::gpu","url":"/api/manipulation/ndarray-gpu#return","content":"Type NDArray A copy of the NDArray but stored in VRAM.  "},{"title":"Exceptions​","type":1,"pageTitle":"NDArray::gpu","url":"/api/manipulation/ndarray-gpu#exceptions","content":"If no devices are detected or support GPU operations, a fatal error will be raised. Fatal error: Uncaught Error: No GPU device available or CUDA not enabled in /src/test.php:8 Stack trace: #0 /src/test.php(8): NDArray-&gt;gpu()   "},{"title":"Notes​","type":1,"pageTitle":"NDArray::gpu","url":"/api/manipulation/ndarray-gpu#notes","content":"tip CUDA DEVICES​ You can use the dumpDevices method to check which devices were detected by NumPower. Currently only video cards with CUDA support are supported (NVIDIA).  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::gpu","url":"/api/manipulation/ndarray-gpu#examples","content":"Example 1 use \\NDArray as nd; $a = nd::array([2, -2, 3]); $a_gpu = $a-&gt;gpu(); $a-&gt;dump(); $a_gpu-&gt;dump(); Output ================================================= NDArray.uuid 0 NDArray.dims [ 3 ] NDArray.strides [ 4 ] NDArray.ndim 1 NDArray.device CPU NDArray.refcount 1 NDArray.descriptor.elsize 4 NDArray.descriptor.numElements 3 NDArray.descriptor.type float32 ================================================= ================================================= NDArray.uuid 1 NDArray.dims [ 3 ] NDArray.strides [ 4 ] NDArray.ndim 1 NDArray.device GPU NDArray.refcount 1 NDArray.descriptor.elsize 4 NDArray.descriptor.numElements 3 NDArray.descriptor.type float32 =================================================  "},{"title":"NDArray::transpose","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-transpose","content":"NDArray::transpose","keywords":""},{"title":"NDArray::abs","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-abs","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::abs","url":"/api/mathematical-functions/ndarray-abs#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::add","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-add","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::add","url":"/api/mathematical-functions/ndarray-add#parameters","content":"$a $b​ Type - NDArray | array | scalarThe arrays to be added, $a and $b must be of the same shape.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::add","url":"/api/mathematical-functions/ndarray-add#return","content":"NDArray​ The sum of $a and $b  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::add","url":"/api/mathematical-functions/ndarray-add#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::add","url":"/api/mathematical-functions/ndarray-add#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = new nd([[2, -2], [1, -1]]); $b = new nd([[3, -3], [2, -1]]); $c = $a + $b; print_r($c); [[5, -5], [3, -2]]  "},{"title":"NDArray::arccos","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-arccos","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arccos","url":"/api/mathematical-functions/ndarray-arccos#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::arccosh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-arccosh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arccosh","url":"/api/mathematical-functions/ndarray-arccosh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::arcsin","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-arcsin","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arcsin","url":"/api/mathematical-functions/ndarray-arcsin#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::arctan","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-arctan","content":"","keywords":""},{"title":"NDArray::arcsinh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-arcsinh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arcsinh","url":"/api/mathematical-functions/ndarray-arcsinh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"Notes​","type":1,"pageTitle":"NDArray::arctan","url":"/api/mathematical-functions/ndarray-arctan#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::ceil","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-ceil","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::ceil","url":"/api/mathematical-functions/ndarray-ceil#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::arctanh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-arctanh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arctanh","url":"/api/mathematical-functions/ndarray-arctanh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::clip","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-clip","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::clip","url":"/api/mathematical-functions/ndarray-clip#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::cos","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-cos","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::cos","url":"/api/mathematical-functions/ndarray-cos#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::cosh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-cosh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::cosh","url":"/api/mathematical-functions/ndarray-cosh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::divide","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-divide","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::divide","url":"/api/mathematical-functions/ndarray-divide#parameters","content":"$a $b​ Type - NDArray | array | scalarInput arrays "},{"title":"Return​","type":1,"pageTitle":"NDArray::divide","url":"/api/mathematical-functions/ndarray-divide#return","content":"NDArray​ Array with the division between $a and $b element-wise "},{"title":"Notes​","type":1,"pageTitle":"NDArray::divide","url":"/api/mathematical-functions/ndarray-divide#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"Examples​","type":1,"pageTitle":"NDArray::divide","url":"/api/mathematical-functions/ndarray-divide#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $c = nd::divide([5, 2, -3], [4, 3, 2]); print_r($c); [1.25, 0.666667, -1.5]  "},{"title":"NDArray::degrees","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-degrees","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::degrees","url":"/api/mathematical-functions/ndarray-degrees#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::exp","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-exp","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::exp","url":"/api/mathematical-functions/ndarray-exp#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::exp2","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-exp2","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::exp2","url":"/api/mathematical-functions/ndarray-exp2#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::expm1","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-expm1","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::expm1","url":"/api/mathematical-functions/ndarray-expm1#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::fix","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-fix","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::fix","url":"/api/mathematical-functions/ndarray-fix#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::floor","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-floor","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::floor","url":"/api/mathematical-functions/ndarray-floor#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::log10","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-log10","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::log10","url":"/api/mathematical-functions/ndarray-log10#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::log","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-log","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::log","url":"/api/mathematical-functions/ndarray-log#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::log2","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-log2","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::log2","url":"/api/mathematical-functions/ndarray-log2#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::log1p","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-log1p","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::log1p","url":"/api/mathematical-functions/ndarray-log1p#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::max","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-max","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::max","url":"/api/mathematical-functions/ndarray-max#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::logb","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-logb","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::logb","url":"/api/mathematical-functions/ndarray-logb#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::min","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-min","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::min","url":"/api/mathematical-functions/ndarray-min#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::mod","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-mod","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::mod","url":"/api/mathematical-functions/ndarray-mod#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::negative","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-negative","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::negative","url":"/api/mathematical-functions/ndarray-negative#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::pow","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-pow","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::pow","url":"/api/mathematical-functions/ndarray-pow#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::multiply","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-multiply","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::multiply","url":"/api/mathematical-functions/ndarray-multiply#parameters","content":"$a $b​ Type - NDArray | array | scalarThe arrays to be multiplied, $a and $b must be of the same shape. "},{"title":"Return​","type":1,"pageTitle":"NDArray::multiply","url":"/api/mathematical-functions/ndarray-multiply#return","content":"NDArray​ The multiplication of $a and $b element-wise "},{"title":"Notes​","type":1,"pageTitle":"NDArray::multiply","url":"/api/mathematical-functions/ndarray-multiply#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"Examples​","type":1,"pageTitle":"NDArray::multiply","url":"/api/mathematical-functions/ndarray-multiply#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = new nd([[2, -2], [1, -1]]); $b = new nd([[3, -3], [2, -1]]); $c = $a * $b; print_r($c); [[6, 6], [2, 1]]  "},{"title":"NDArray::radians","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-radians","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::radians","url":"/api/mathematical-functions/ndarray-radians#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::prod","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-prod","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::prod","url":"/api/mathematical-functions/ndarray-prod#parameters","content":"$a​ Type - NDArray | array | scalarInput array $a​ Type - NDArray | array | scalarThe axis to perform the product. If $axis is NULL, will calculate the product of all the elements of $a. "},{"title":"Return​","type":1,"pageTitle":"NDArray::prod","url":"/api/mathematical-functions/ndarray-prod#return","content":"NDArray​ The product of $a. If $axis is not NULL, the specified axis is removed. "},{"title":"Examples​","type":1,"pageTitle":"NDArray::prod","url":"/api/mathematical-functions/ndarray-prod#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = new nd([[1, 2], [3, 4]]); $c = nd::prod($a); print_r($c); 24  "},{"title":"NDArray::rint","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-rint","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::rint","url":"/api/mathematical-functions/ndarray-rint#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sign","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-sign","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::sign","url":"/api/mathematical-functions/ndarray-sign#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sin","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-sin","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::sin","url":"/api/mathematical-functions/ndarray-sin#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sinc","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-sinc","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::sinc","url":"/api/mathematical-functions/ndarray-sinc#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sinh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-sinh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::sinh","url":"/api/mathematical-functions/ndarray-sinh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sqrt","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-sqrt","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::sqrt","url":"/api/mathematical-functions/ndarray-sqrt#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::abs","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-square","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::abs","url":"/api/mathematical-functions/ndarray-square#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sum","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-sum","content":"NDArray::sum public static function sum($a, $axis = NULL); ","keywords":""},{"title":"NDArray::tan","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-tan","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::tan","url":"/api/mathematical-functions/ndarray-tan#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::subtract","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-subtract","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::subtract","url":"/api/mathematical-functions/ndarray-subtract#parameters","content":"$a $b​ Type - NDArray | array | scalarInput arrays "},{"title":"Return​","type":1,"pageTitle":"NDArray::subtract","url":"/api/mathematical-functions/ndarray-subtract#return","content":"NDArray​ Element-wise subtraction of $a and $b element-wise "},{"title":"Notes​","type":1,"pageTitle":"NDArray::subtract","url":"/api/mathematical-functions/ndarray-subtract#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"Examples​","type":1,"pageTitle":"NDArray::subtract","url":"/api/mathematical-functions/ndarray-subtract#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = new nd([[1, 2], [3, 4]]); $b = new nd([[1, 2], [3, 4]]); $c = nd::subtract($a, $b); print_r($c); [[0, 0], [0, 0]]  "},{"title":"NDArray::tanh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-tanh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::tanh","url":"/api/mathematical-functions/ndarray-tanh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::trunc","type":0,"sectionRef":"#","url":"/api/mathematical-functions/ndarray-trunc","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::trunc","url":"/api/mathematical-functions/ndarray-trunc#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::normal","type":0,"sectionRef":"#","url":"/api/random/ndarray-normal","content":"NDArray::normal","keywords":""},{"title":"NDArray::standard_normal","type":0,"sectionRef":"#","url":"/api/random/ndarray-standard_normal","content":"NDArray::standard_normal","keywords":""},{"title":"NDArray::poisson","type":0,"sectionRef":"#","url":"/api/random/ndarray-poisson","content":"NDArray::poisson","keywords":""},{"title":"NDArray::uniform","type":0,"sectionRef":"#","url":"/api/random/ndarray-uniform","content":"NDArray::uniform","keywords":""},{"title":"NDArray::average","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-average","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::average","url":"/api/statistics/ndarray-average#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::mean","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-mean","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::mean","url":"/api/statistics/ndarray-mean#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::median","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-median","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::median","url":"/api/statistics/ndarray-median#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::std","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-std","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::std","url":"/api/statistics/ndarray-std#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::variance","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-variance","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::variance","url":"/api/statistics/ndarray-variance#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"About NumPower","type":0,"sectionRef":"#","url":"/docs/intro","content":"About NumPower Inspired by NumPy, the NumPower library was created to provide the foundation for efficient scientific computing in PHP, as well as leverage the machine learning tools and libraries that already exist and can benefit from it. This C extension developed for PHP can be used to considerably speed up mathematical operations on large datasets and facilitate the manipulation, creation and operation of N-dimensional tensors.","keywords":""},{"title":"Broadcast","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/broadcast","content":"Broadcast","keywords":""},{"title":"The NDArray Object","type":0,"sectionRef":"#","url":"/docs/ndarray","content":"The NDArray Object Our library implements the NDArray object, this object works like an Array and is the object used by default in the arguments of NumPower operations. &lt;?php $a = new NDArray([[1, 2], [3, 4]]); print_r($a); Output [[1, 2], [3, 4]] ","keywords":""},{"title":"GPU Support","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/gpu","content":"","keywords":""},{"title":"Copy NDArray to GPU​","type":1,"pageTitle":"GPU Support","url":"/docs/tutorial-basics/gpu#copy-ndarray-to-gpu","content":"To copy an NDArray to your video card, just use the gpu() method. This method will return a new NDArray with the data copied to your VRAM. &lt;?php use \\NDArray as nd; $a = nd::ones([10, 10]); $a_gpu = $a-&gt;gpu();  In this example we create an NDArray with format (10, 10) full of one. Then we use the gpu() method to create a copy of this NDArray on the GPU. "},{"title":"Copy NDArray to CPU​","type":1,"pageTitle":"GPU Support","url":"/docs/tutorial-basics/gpu#copy-ndarray-to-cpu","content":"In most cases, you will want your NDArray stored in your RAM. To copy an NDArray that is stored in your VRAM (GPU) to your RAM (CPU), just use the cpu() method. &lt;?php use \\NDArray as nd; $a = nd::ones([10, 10]); $a_gpu = $a-&gt;gpu(); // OPERATIONS $result = $a_gpu-&gt;cpu();  "},{"title":"GPU and CPU operations​","type":1,"pageTitle":"GPU Support","url":"/docs/tutorial-basics/gpu#gpu-and-cpu-operations","content":"In operations involving more than one tensor, like NDArray::add, both tensors involved must be on the same device. Operations between arrays on different devices will raise an exception. In this first version of NumPower, we want the user to explicitly say where they want to store their data, so automatic copies between GPU and CPU are not available. danger Some GPU-incompatible operations may raise an exception. In these cases the user must copy the tensor to the CPU manually using the appropriate method. "},{"title":"NDArray Creation","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/ndarray-creation","content":"","keywords":""},{"title":"Convert PHP Array to NDArray​","type":1,"pageTitle":"NDArray Creation","url":"/docs/tutorial-basics/ndarray-creation#convert-php-array-to-ndarray","content":"In the example below we will create a matrix of size 2 x 2 from an array in PHP use \\NDArray as nd; $ndarray = new nd([[1, 2], [3, 4]]);  "},{"title":"Creating NDArray with initializers​","type":1,"pageTitle":"NDArray Creation","url":"/docs/tutorial-basics/ndarray-creation#creating-ndarray-with-initializers","content":"You can also use one of several available initialization methods, below we will initialize a 2 x 4 x 4 NDArrayfull of ones. &lt;?php use \\NDArray as nd; $ndarray = nd::ones([2, 4, 4]); print_r($ndarray);  Output [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]]  "},{"title":"Iterating","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/iterating-ndarray","content":"Iterating You can iterate over an NDArray as you would a PHP array. &lt;?php $a = new NDArray([[1, 2], [3, 4]]); foreach($a as $row) { echo(&quot;\\nRow\\n&quot;); print_r($row); } Output Row [1, 2] Row [3, 4] When you iterate, slice or reshape an NDArray, NumPower will share the same data buffer as the original array, avoiding copies and memory I/O, reducing RAM consumption. In some cases a copy may be made automatically. note Iterating over NDArray is not faster than iterating over a PHP array. Mathematical operations with NDArrays are faster when using one of the methods available in NumPower.","keywords":""},{"title":"Indexing","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/ndarray-indexing","content":"Indexing Indexing on the NDArray can be treated exactly like a standard array, with a few extras that we'll see next. The simplest way to set and return a value from an NDArray is through the standard PHP indexer: &lt;?php use \\NDArray as nd; $a = nd::zeros([10, 10]); // Initialize NDArray of shape (10, 10) full of zeros echo $a[0][0]; // Get echo &quot;\\n&quot;; $a[0][0] = 1; // Set echo $a[0][0]; // Get Output 0 1 note The __offsetGet() method will return a slice of the root NDArray, a memory copy will only be made if the slice in question is changed.","keywords":""},{"title":"Docker Image","type":0,"sectionRef":"#","url":"/install/docker-install","content":"Docker Image If you prefer a hassle-free installation process, you can use a pre-built Docker image that includes NumPower and its dependencies. The Docker image provides a convenient and isolated environment to run your PHP code with NumPower already installed. To install NumPower using the Docker image, follow these steps: Install Docker on your system by following the instructions provided by Docker for your operating system. Pull the NumPower Docker image from the Docker Hub by running the following command in your terminal or command prompt: docker pull numpower/numpower:ubuntu-php82 For GPU support with CUDA, use the image: docker pull numpower/numpower:ubuntu-php82-cuda Once the image is downloaded, you can run your PHP code with NumPower by executing the following command in your terminal or command prompt: docker run -it --rm -v /path/to/your/code:/app numpower/numpower:ubuntu-php82 php /app/your-script.php Replace /path/to/your/code with the path to your PHP code on the host machine. Also, replace your-script.php with the name of your PHP script that uses NumPower. This command mounts your local code directory into the Docker container and runs the PHP script with NumPower. Using the Docker image provides a convenient way to start using NumPower without worrying about the compilation process. However, if you prefer to compile NumPower from the source, continue reading for the alternative method.","keywords":""},{"title":"Compiling from source","type":0,"sectionRef":"#","url":"/install/from-source","content":"","keywords":""},{"title":"Requirements​","type":1,"pageTitle":"Compiling from source","url":"/install/from-source#requirements","content":"Before installing NumPower, ensure that your system meets the following requirements: PHP development files and header files. This may vary based on your operating system. Consult your system's package manager or PHP documentation for specific instructions.C++ compiler with C++11 support (such as GCC or Clang). Optional requirements (for enhanced performance and additional functionalities): CUBLAS: NVIDIA CUDA Toolkit with CUBLAS library (for GPU-accelerated linear algebra operations)CBLAS: CBLAS library (for CPU-based linear algebra operations)LAPACKE: LAPACKE library (for advanced linear algebra operations) "},{"title":"Compiling​","type":1,"pageTitle":"Compiling from source","url":"/install/from-source#compiling","content":"Clone the NumPower source code repository from the official GitHub repository to your local machine. Build and compile the PHP extension by running the appropriate commands specific to your environment. $ phpize $ ./configure $ make $ make install  Once the compilation is complete, you will obtain a compiled PHP extension file. If necessary, copy the compiled extension file to the appropriate location in your PHP extensions directory. Update your PHP configuration file (php.ini) to include the extension entry for NumPower. Add the following line to the php.ini file: extension=ndarray.so  "},{"title":"Installing NumPower","type":0,"sectionRef":"#","url":"/install/install","content":"Installing NumPower This page provides instructions for installing NumPower, a powerful numerical computing library for PHP inspired by the functionality of NumPy in Python. NumPower enables efficient array operations, mathematical functions, and tools for manipulating and analyzing numerical data in PHP. NumPower is implemented as a PHP extension, which requires a compilation process to install it in your PHP environment. There are two methods for installing NumPower: using a Docker image or compiling the extension from the source.","keywords":""}]