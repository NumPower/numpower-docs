[{"title":"NDArray::gpu","type":0,"sectionRef":"#","url":"/api/devices-functions/ndarray-gpu","content":"","keywords":""},{"title":"Return​","type":1,"pageTitle":"NDArray::gpu","url":"/api/devices-functions/ndarray-gpu#return","content":"Type NDArray A copy of the NDArray but stored in VRAM.  "},{"title":"Exceptions​","type":1,"pageTitle":"NDArray::gpu","url":"/api/devices-functions/ndarray-gpu#exceptions","content":"If no devices are detected or support GPU operations, a fatal error will be raised. Fatal error: Uncaught Error: No GPU device available or CUDA not enabled in /src/test.php:8 Stack trace: #0 /src/test.php(8): NDArray-&gt;gpu()   "},{"title":"Notes​","type":1,"pageTitle":"NDArray::gpu","url":"/api/devices-functions/ndarray-gpu#notes","content":"tip CUDA DEVICES​ You can use the dumpDevices method to check which devices were detected by NumPower. Currently only video cards with CUDA support are supported (NVIDIA).  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::gpu","url":"/api/devices-functions/ndarray-gpu#examples","content":"Example 1 use \\NDArray as nd; $a = nd::array([2, -2, 3]); $a_gpu = $a-&gt;gpu(); $a-&gt;dump(); $a_gpu-&gt;dump(); Output ================================================= NDArray.uuid 0 NDArray.dims [ 3 ] NDArray.strides [ 4 ] NDArray.ndim 1 NDArray.device CPU NDArray.refcount 1 NDArray.descriptor.elsize 4 NDArray.descriptor.numElements 3 NDArray.descriptor.type float32 ================================================= ================================================= NDArray.uuid 1 NDArray.dims [ 3 ] NDArray.strides [ 4 ] NDArray.ndim 1 NDArray.device GPU NDArray.refcount 1 NDArray.descriptor.elsize 4 NDArray.descriptor.numElements 3 NDArray.descriptor.type float32 =================================================  "},{"title":"NDArray::cpu","type":0,"sectionRef":"#","url":"/api/devices-functions/ndarray-cpu","content":"","keywords":""},{"title":"Return​","type":1,"pageTitle":"NDArray::cpu","url":"/api/devices-functions/ndarray-cpu#return","content":"Type NDArray A copy of the NDArray but stored in RAM.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::cpu","url":"/api/devices-functions/ndarray-cpu#examples","content":"Example 1 use \\NDArray as nd; $a_gpu = nd::array([2, -2, 3])-&gt;gpu(); $a_cpu = $a-&gt;cpu(); $a_gpu-&gt;dump(); $a_cpu-&gt;dump(); Output ================================================= NDArray.uuid 0 NDArray.dims [ 3 ] NDArray.strides [ 4 ] NDArray.ndim 1 NDArray.device GPU NDArray.refcount 1 NDArray.descriptor.elsize 4 NDArray.descriptor.numElements 3 NDArray.descriptor.type float32 ================================================= ================================================= NDArray.uuid 1 NDArray.dims [ 3 ] NDArray.strides [ 4 ] NDArray.ndim 1 NDArray.device CPU NDArray.refcount 1 NDArray.descriptor.elsize 4 NDArray.descriptor.numElements 3 NDArray.descriptor.type float32 =================================================  "},{"title":"NDArray::isGPU","type":0,"sectionRef":"#","url":"/api/devices-functions/ndarray-isgpu","content":"","keywords":""},{"title":"Return​","type":1,"pageTitle":"NDArray::isGPU","url":"/api/devices-functions/ndarray-isgpu#return","content":"Type bool True if NDArray is stored in the GPU, False otherwise. "},{"title":"NDArray::setDevice","type":0,"sectionRef":"#","url":"/api/devices-functions/ndarray-setdevice","content":"NDArray::setDevice public static function setDevice(long $deviceId): null; Specifies which GPU device to use by ID. By default, all operations are performed on GPU id = 0. Use the dumpDevices method if you want to check the ID in a multi-GPU environment.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/api/image-support/introduction","content":"Introduction When NumPower is compiled in an environment with PHP-GD available, functions to facilitate image manipulation will be available for use. You can use a GdImage image to build an NDArray or as an argument for the different types of operations available, making image processing fast and with the possibility of performing image processing using a GPU. use \\NDArray as nd; $gd_image = imagecreatefromjpeg(&quot;test_img.jpg&quot;); $gd_image_array = nd:array($gd_image); ","keywords":""},{"title":"NDArray::arange","type":0,"sectionRef":"#","url":"/api/initializers/ndarray-arange","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::arange","url":"/api/initializers/ndarray-arange#parameters","content":""},{"title":"$start​","type":1,"pageTitle":"NDArray::arange","url":"/api/initializers/ndarray-arange#start","content":"Type scalar Start of the interval. Default value is 0. "},{"title":"$stop​","type":1,"pageTitle":"NDArray::arange","url":"/api/initializers/ndarray-arange#stop","content":"Type scalar Stop of the interval. "},{"title":"$step​","type":1,"pageTitle":"NDArray::arange","url":"/api/initializers/ndarray-arange#step","content":"Type scalar Step of the interval. Default value is 1.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::arange","url":"/api/initializers/ndarray-arange#return","content":"Type - NDArray A single-precision (float32) NDArray with evenly spaced values.  "},{"title":"NDArray::toImage","type":0,"sectionRef":"#","url":"/api/image-support/ndarray-toimage","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::toImage","url":"/api/image-support/ndarray-toimage#notes","content":"note PHP-GD REQUIRED​ The PHP-GD extension must be installed during NumPower compilation for this function to be available. tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::toImage","url":"/api/image-support/ndarray-toimage#examples","content":"use \\NDArray as nd; $gd_image_array = nd::array(imagecreatefromjpeg(&quot;test_img.jpg&quot;)); print_r($gd_image_array-&gt;shape()); // Your operations here // ... // End of operations $gd_image = $gd_image_array-&gt;toImage(); print_r($gd_image); // Now we have a GD image imagejpeg($gd_image, &quot;out.jpg&quot;); // Save the image Array ( [0] =&gt; 3 [1] =&gt; 1200 [2] =&gt; 1920 ) GdImage Object ( )  "},{"title":"NDArray::array","type":0,"sectionRef":"#","url":"/api/initializers/ndarray-array","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::array","url":"/api/initializers/ndarray-array#parameters","content":""},{"title":"$array​","type":1,"pageTitle":"NDArray::array","url":"/api/initializers/ndarray-array#array","content":"Type array[long|double,] The PHP array to be converted to a NDArray  "},{"title":"Return​","type":1,"pageTitle":"NDArray::array","url":"/api/initializers/ndarray-array#return","content":"Type - NDArray A single-precision (float32) NDArray with the same shape and values of $array  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::array","url":"/api/initializers/ndarray-array#notes","content":"note Every floating point in PHP is a double precision (float64) so some precision may be lost during conversion.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::array","url":"/api/initializers/ndarray-array#examples","content":"Example 1 use \\NDArray as nd; $a = nd::array([[1, 2], [3, 4]]); print_r($a); [[1, 2], [3, 4]]   "},{"title":"NDArray::ones","type":0,"sectionRef":"#","url":"/api/initializers/ndarray-ones","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::ones","url":"/api/initializers/ndarray-ones#parameters","content":""},{"title":"$shape​","type":1,"pageTitle":"NDArray::ones","url":"/api/initializers/ndarray-ones#shape","content":"Type array[long,] The shape parameter can be a sequence of integers, indicating the dimensions of the array  "},{"title":"Return​","type":1,"pageTitle":"NDArray::ones","url":"/api/initializers/ndarray-ones#return","content":"Type - NDArray Return an array of shape $shape filles with ones. "},{"title":"NDArray::zeros","type":0,"sectionRef":"#","url":"/api/initializers/ndarray-zeros","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::zeros","url":"/api/initializers/ndarray-zeros#parameters","content":""},{"title":"$shape​","type":1,"pageTitle":"NDArray::zeros","url":"/api/initializers/ndarray-zeros#shape","content":"Type array[long,] The shape parameter can be a sequence of integers, indicating the dimensions of the array  "},{"title":"Return​","type":1,"pageTitle":"NDArray::zeros","url":"/api/initializers/ndarray-zeros#return","content":"Type - NDArray Return an array of shape $shape filled with zeros. "},{"title":"NumPower API","type":0,"sectionRef":"#","url":"/api/intro","content":"","keywords":""},{"title":"How This API Documentation is Organized​","type":1,"pageTitle":"NumPower API","url":"/api/intro#how-this-api-documentation-is-organized","content":"This API documentation is divided into various categories to help you find the information you need effectively: Math: This section encompasses all mathematical functions provided by NumPower, including arithmetic and trigonometric operations. Initializers: Learn about the multiple ways to initialize arrays in NumPower, with functions to create arrays from existing data or initialize arrays with preset values. Linear Algebra: Dive into the functions associated with linear algebra operations, such as matrix multiplication, determinants, solving linear equations, among others. Logic Functions: This category includes functions for evaluating logical statements, including logical AND, OR, NOT operations, and comparison operations. Manipulation: Understand more about the functions that allow you to alter the shape, size, and structure of NumPower arrays. Random: Explore the functions provided by NumPower for generating arrays of random numbers, drawn from various probability distributions. Statistics: This part houses statistical functions for operations such as averages, medians and variances. Low-level Debug: This section includes functions and methods to assist in debugging. Whether you're a beginner embarking on your journey in numerical computing, a developer eager to incorporate numerical computing into your AI projects, or an ML enthusiast keen on leveraging PHP, this documentation will help you navigate NumPower effectively. As the NumPower community grows and the library evolves, we remain committed to keeping this documentation comprehensive, up-to-date, and user-friendly. "},{"title":"NDArray::cholesky","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-cholesky","content":"NDArray::cholesky public static function cholesky(NDArray|array $a): NDArray; Calculates the Cholesky decomposition of a positive-definite array, decomposing it into a lower triangular matrix and its conjugate transpose.","keywords":""},{"title":"NDArray::identity","type":0,"sectionRef":"#","url":"/api/initializers/ndarray-identity","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::identity","url":"/api/initializers/ndarray-identity#parameters","content":""},{"title":"$size​","type":1,"pageTitle":"NDArray::identity","url":"/api/initializers/ndarray-identity#size","content":"Type long Number of rows and columns of the new square array of size ($size, $size)  "},{"title":"Return​","type":1,"pageTitle":"NDArray::identity","url":"/api/initializers/ndarray-identity#return","content":"Type - NDArray Return a new square array of size ($size, $size)  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::identity","url":"/api/initializers/ndarray-identity#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = nd::identity(10); print_r($a); [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]   "},{"title":"Exceptions​","type":1,"pageTitle":"NDArray::identity","url":"/api/initializers/ndarray-identity#exceptions","content":"If $size is less than 0 a Fatal error will be raised Fatal error: Uncaught Error: negative dimensions are not allowed in /src/test.php:4  "},{"title":"NDArray::cond","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-cond","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::cond","url":"/api/linear-algebra/ndarray-cond#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::convolve2d","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-convolve2d","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::convolve2d","url":"/api/linear-algebra/ndarray-convolve2d#parameters","content":""},{"title":"$a $b​","type":1,"pageTitle":"NDArray::convolve2d","url":"/api/linear-algebra/ndarray-convolve2d#a-b","content":"Type - NDArray | array | GdImageThe arrays to perform the convolution. "},{"title":"$mode​","type":1,"pageTitle":"NDArray::convolve2d","url":"/api/linear-algebra/ndarray-convolve2d#mode","content":"Type - stringThe size of the output. Can be: full, valid and same "},{"title":"$boundary​","type":1,"pageTitle":"NDArray::convolve2d","url":"/api/linear-algebra/ndarray-convolve2d#boundary","content":"Type - stringA flag indicating how to handle boundaries. Can be: fill, wrap and symm  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::convolve2d","url":"/api/linear-algebra/ndarray-convolve2d#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::det","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-det","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::det","url":"/api/linear-algebra/ndarray-det#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::eig","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-eig","content":"NDArray::eig public static function eig(NDArray|array $a): array; Computes the eigenvalues and eigenvectors of a square array.","keywords":""},{"title":"NDArray::dot","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-dot","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::dot","url":"/api/linear-algebra/ndarray-dot#parameters","content":""},{"title":"$a $b​","type":1,"pageTitle":"NDArray::dot","url":"/api/linear-algebra/ndarray-dot#a-b","content":"Type NDArray|array|long|double The arrays to perfom the dot product.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::dot","url":"/api/linear-algebra/ndarray-dot#return","content":"Type - NDArray If both $a and $b are scalars or 1-D arrays, the dot product operation yields a scalar value. In this case, a single scalar is returned as the result.If either $a or $b is a scalar and the other is an array, or if both $a and $b are arrays with any dimensionality greater than 1, the dot product operation results in an array. The returned array will have a shape determined by the dimensions of $a and $b according to the dot product rules.  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::dot","url":"/api/linear-algebra/ndarray-dot#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::dot","url":"/api/linear-algebra/ndarray-dot#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = nd::array([[1, 2],[3, 4]]); $b = nd::array([1, 2]); $result = nd::dot($a, $b); print_r($result); [5, 11]  "},{"title":"NDArray::inv","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-inv","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::inv","url":"/api/linear-algebra/ndarray-inv#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::inner","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-inner","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::inner","url":"/api/linear-algebra/ndarray-inner#parameters","content":""},{"title":"$a $b​","type":1,"pageTitle":"NDArray::inner","url":"/api/linear-algebra/ndarray-inner#a-b","content":"Type NDArray|array|long|double The arrays to perfom the inner product.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::inner","url":"/api/linear-algebra/ndarray-inner#return","content":"Type NDArray If both $a and $b are scalars or 1-D arrays, the function will return a scalar value. Otherwise, if the input arrays have more than one dimension, an array will be returned.  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::inner","url":"/api/linear-algebra/ndarray-inner#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::inner","url":"/api/linear-algebra/ndarray-inner#examples","content":"Example 1Example 2 use \\NDArray as nd; $a = nd::array([2, -2, 3]); $b = nd::array([1, -1.5, 3]); $result = nd::inner($a, $b); print_r($result); 14  "},{"title":"NDArray::lstsq","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-lstsq","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::lstsq","url":"/api/linear-algebra/ndarray-lstsq#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::lu","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-lu","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::lu","url":"/api/linear-algebra/ndarray-lu#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::matmul","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-matmul","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::matmul","url":"/api/linear-algebra/ndarray-matmul#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::matrix_rank","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-matrixrank","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::matrix_rank","url":"/api/linear-algebra/ndarray-matrixrank#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::norm","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-norm","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::norm","url":"/api/linear-algebra/ndarray-norm#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::qr","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-qr","content":"NDArray::qr public static function qr(NDArray|array $a): array; Calculates the QR decomposition of an array, which expresses it as the product of an orthogonal matrix (Q) and an upper triangular matrix (R).","keywords":""},{"title":"NDArray::solve","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-solve","content":"NDArray::solve public static function solve(NDArray|array $a, NDArray|array $b): NDArray; Solves a linear system of equations for x, where Ax = b, and A and b are given arrays.","keywords":""},{"title":"NDArray::outer","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-outer","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::outer","url":"/api/linear-algebra/ndarray-outer#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::trace","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-trace","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::trace","url":"/api/linear-algebra/ndarray-trace#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::svd","type":0,"sectionRef":"#","url":"/api/linear-algebra/ndarray-svd","content":"","keywords":""},{"title":"Return​","type":1,"pageTitle":"NDArray::svd","url":"/api/linear-algebra/ndarray-svd#return","content":"Type - array[NDArray, NDArray, NDArray] PHP array containing the Unitary Arrays (U) [0], the vector(s) with the singular values (S) [1] and the unitary arrays (Vh) [2]  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::svd","url":"/api/linear-algebra/ndarray-svd#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::allclose","type":0,"sectionRef":"#","url":"/api/logic/ndarray-allclose","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::allclose","url":"/api/logic/ndarray-allclose#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::all","type":0,"sectionRef":"#","url":"/api/logic/ndarray-all","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::all","url":"/api/logic/ndarray-all#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::equal","type":0,"sectionRef":"#","url":"/api/logic/ndarray-equal","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::equal","url":"/api/logic/ndarray-equal#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::greater","type":0,"sectionRef":"#","url":"/api/logic/ndarray-greater","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::greater","url":"/api/logic/ndarray-greater#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::greater_equal","type":0,"sectionRef":"#","url":"/api/logic/ndarray-greater_equal","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::greater_equal","url":"/api/logic/ndarray-greater_equal#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::less","type":0,"sectionRef":"#","url":"/api/logic/ndarray-less","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::less","url":"/api/logic/ndarray-less#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::less_equal","type":0,"sectionRef":"#","url":"/api/logic/ndarray-less_equal","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::less_equal","url":"/api/logic/ndarray-less_equal#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::not_equal","type":0,"sectionRef":"#","url":"/api/logic/ndarray-not_equal","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::not_equal","url":"/api/logic/ndarray-not_equal#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::dumpDevices","type":0,"sectionRef":"#","url":"/api/low-level-debug/ndarray-dumpDevices","content":"","keywords":""},{"title":"Examples​","type":1,"pageTitle":"NDArray::dumpDevices","url":"/api/low-level-debug/ndarray-dumpDevices#examples","content":"Example 1 use \\NDArray as nd; nd::dumpDevices(); Output ============================================================================== Number of CUDA devices: 1 --------------------------------------------------------------------------- Device 0: NVIDIA GeForce RTX 2070 SUPER Compute capability: 7.5 Total global memory: 8358854656 bytes Max threads per block: 1024 Max threads in X-dimension of block: 1024 Max threads in Y-dimension of block: 1024 Max threads in Z-dimension of block: 64 Max grid size in X-dimension: 2147483647 Max grid size in Y-dimension: 65535 Max grid size in Z-dimension: 65535 Max grid size in Z-dimension: 65535 Max grid size in Z-dimension: 65535 Max grid size in Z-dimension: 65535 --------------------------------------------------------------------------- ==============================================================================  "},{"title":"NDArray::dump","type":0,"sectionRef":"#","url":"/api/low-level-debug/ndarray-dump","content":"","keywords":""},{"title":"Examples​","type":1,"pageTitle":"NDArray::dump","url":"/api/low-level-debug/ndarray-dump#examples","content":"Example 1 use \\NDArray as nd; $a = nd::array([[1, 2, 3, 4]]); $a-&gt;dump(); Output ================================================= NDArray.uuid 0 NDArray.dims [ 1 4 ] NDArray.strides [ 16 4 ] NDArray.ndim 2 NDArray.device CPU NDArray.refcount 1 NDArray.descriptor.elsize 4 NDArray.descriptor.numElements 4 NDArray.descriptor.type float32 =================================================  "},{"title":"NDArray::copy","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-copy","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::copy","url":"/api/manipulation/ndarray-copy#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::flatten","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-flat","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::flatten","url":"/api/manipulation/ndarray-flat#parameters","content":""},{"title":"$a​","type":1,"pageTitle":"NDArray::flatten","url":"/api/manipulation/ndarray-flat#a","content":"Type NDArray array scalar Target array  "},{"title":"Return​","type":1,"pageTitle":"NDArray::flatten","url":"/api/manipulation/ndarray-flat#return","content":"Type - NDArray A copy of $a, with dimensions collapsed to 1-d, in the same device.  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::flatten","url":"/api/manipulation/ndarray-flat#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::reshape","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-reshape","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::reshape","url":"/api/manipulation/ndarray-reshape#parameters","content":""},{"title":"$shape​","type":1,"pageTitle":"NDArray::reshape","url":"/api/manipulation/ndarray-reshape#shape","content":"Type array The new shape of the NDArray.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::reshape","url":"/api/manipulation/ndarray-reshape#return","content":"Type - NDArray Return a view of the array with shape $shape. To be compatible, the new shape must have the same amount of elements as the old one. "},{"title":"NDArray::shape","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-shape","content":"NDArray::shape public function shape(): array; Return a PHP array representing the shape of the NDArray","keywords":""},{"title":"NDArray::toArray","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-toArray","content":"NDArray::toArray public function toArray(): array; Return a PHP array with the same shape and a copy of values of the NDArray.","keywords":""},{"title":"NDArray::size","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-size","content":"NDArray::size public function size(): long; Return the total number of elements in the NDArray.","keywords":""},{"title":"NDArray::transpose","type":0,"sectionRef":"#","url":"/api/manipulation/ndarray-transpose","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::transpose","url":"/api/manipulation/ndarray-transpose#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::add","type":0,"sectionRef":"#","url":"/api/mathematical-functions/arithmetic/ndarray-add","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::add","url":"/api/mathematical-functions/arithmetic/ndarray-add#parameters","content":"$a $b​ Type - NDArray | array | scalarThe arrays to be added, $a and $b must be of the same shape.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::add","url":"/api/mathematical-functions/arithmetic/ndarray-add#return","content":"NDArray​ The sum of $a and $b  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::add","url":"/api/mathematical-functions/arithmetic/ndarray-add#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::add","url":"/api/mathematical-functions/arithmetic/ndarray-add#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = new nd([[2, -2], [1, -1]]); $b = new nd([[3, -3], [2, -1]]); $c = $a + $b; print_r($c); [[5, -5], [3, -2]]  "},{"title":"NDArray::divide","type":0,"sectionRef":"#","url":"/api/mathematical-functions/arithmetic/ndarray-divide","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::divide","url":"/api/mathematical-functions/arithmetic/ndarray-divide#parameters","content":""},{"title":"$a $b​","type":1,"pageTitle":"NDArray::divide","url":"/api/mathematical-functions/arithmetic/ndarray-divide#a-b","content":"Type - NDArray | array | scalarInput arrays  "},{"title":"Return​","type":1,"pageTitle":"NDArray::divide","url":"/api/mathematical-functions/arithmetic/ndarray-divide#return","content":""},{"title":"NDArray​","type":1,"pageTitle":"NDArray::divide","url":"/api/mathematical-functions/arithmetic/ndarray-divide#ndarray","content":"Array with the division between $a and $b element-wise  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::divide","url":"/api/mathematical-functions/arithmetic/ndarray-divide#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::divide","url":"/api/mathematical-functions/arithmetic/ndarray-divide#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $c = nd::divide([5, 2, -3], [4, 3, 2]); print_r($c); [1.25, 0.666667, -1.5]  "},{"title":"NDArray::mod","type":0,"sectionRef":"#","url":"/api/mathematical-functions/arithmetic/ndarray-mod","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::mod","url":"/api/mathematical-functions/arithmetic/ndarray-mod#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::negative","type":0,"sectionRef":"#","url":"/api/mathematical-functions/arithmetic/ndarray-negative","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::negative","url":"/api/mathematical-functions/arithmetic/ndarray-negative#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::multiply","type":0,"sectionRef":"#","url":"/api/mathematical-functions/arithmetic/ndarray-multiply","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::multiply","url":"/api/mathematical-functions/arithmetic/ndarray-multiply#parameters","content":"$a $b​ Type - NDArray | array | scalarThe arrays to be multiplied, $a and $b must be of the same shape.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::multiply","url":"/api/mathematical-functions/arithmetic/ndarray-multiply#return","content":"NDArray​ The multiplication of $a and $b element-wise  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::multiply","url":"/api/mathematical-functions/arithmetic/ndarray-multiply#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::multiply","url":"/api/mathematical-functions/arithmetic/ndarray-multiply#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = new nd([[2, -2], [1, -1]]); $b = new nd([[3, -3], [2, -1]]); $c = $a * $b; print_r($c); [[6, 6], [2, 1]]  "},{"title":"NDArray::pow","type":0,"sectionRef":"#","url":"/api/mathematical-functions/arithmetic/ndarray-pow","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::pow","url":"/api/mathematical-functions/arithmetic/ndarray-pow#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::exp","type":0,"sectionRef":"#","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-exp","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::exp","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-exp#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::subtract","type":0,"sectionRef":"#","url":"/api/mathematical-functions/arithmetic/ndarray-subtract","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::subtract","url":"/api/mathematical-functions/arithmetic/ndarray-subtract#parameters","content":""},{"title":"$a $b​","type":1,"pageTitle":"NDArray::subtract","url":"/api/mathematical-functions/arithmetic/ndarray-subtract#a-b","content":"Type - NDArray | array | scalarInput arrays  "},{"title":"Return​","type":1,"pageTitle":"NDArray::subtract","url":"/api/mathematical-functions/arithmetic/ndarray-subtract#return","content":""},{"title":"NDArray​","type":1,"pageTitle":"NDArray::subtract","url":"/api/mathematical-functions/arithmetic/ndarray-subtract#ndarray","content":"Element-wise subtraction of $a and $b element-wise  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::subtract","url":"/api/mathematical-functions/arithmetic/ndarray-subtract#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::subtract","url":"/api/mathematical-functions/arithmetic/ndarray-subtract#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = new nd([[1, 2], [3, 4]]); $b = new nd([[1, 2], [3, 4]]); $c = nd::subtract($a, $b); print_r($c); [[0, 0], [0, 0]]  "},{"title":"NDArray::exp2","type":0,"sectionRef":"#","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-exp2","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::exp2","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-exp2#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::expm1","type":0,"sectionRef":"#","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-expm1","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::expm1","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-expm1#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::log","type":0,"sectionRef":"#","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-log","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::log","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-log#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::log10","type":0,"sectionRef":"#","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-log10","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::log10","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-log10#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::log1p","type":0,"sectionRef":"#","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-log1p","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::log1p","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-log1p#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::log2","type":0,"sectionRef":"#","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-log2","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::log2","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-log2#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::logb","type":0,"sectionRef":"#","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-logb","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::logb","url":"/api/mathematical-functions/exponents-and-logarithms/ndarray-logb#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::min","type":0,"sectionRef":"#","url":"/api/mathematical-functions/extrema-finding/ndarray-min","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::min","url":"/api/mathematical-functions/extrema-finding/ndarray-min#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::max","type":0,"sectionRef":"#","url":"/api/mathematical-functions/extrema-finding/ndarray-max","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::max","url":"/api/mathematical-functions/extrema-finding/ndarray-max#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::arccosh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/hyperbolic/ndarray-arccosh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arccosh","url":"/api/mathematical-functions/hyperbolic/ndarray-arccosh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::arctanh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/hyperbolic/ndarray-arctanh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arctanh","url":"/api/mathematical-functions/hyperbolic/ndarray-arctanh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::arcsinh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/hyperbolic/ndarray-arcsinh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arcsinh","url":"/api/mathematical-functions/hyperbolic/ndarray-arcsinh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::cosh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/hyperbolic/ndarray-cosh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::cosh","url":"/api/mathematical-functions/hyperbolic/ndarray-cosh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sinh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/hyperbolic/ndarray-sinh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::sinh","url":"/api/mathematical-functions/hyperbolic/ndarray-sinh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::tanh","type":0,"sectionRef":"#","url":"/api/mathematical-functions/hyperbolic/ndarray-tanh","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::tanh","url":"/api/mathematical-functions/hyperbolic/ndarray-tanh#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::abs","type":0,"sectionRef":"#","url":"/api/mathematical-functions/miscellaneous/ndarray-abs","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::abs","url":"/api/mathematical-functions/miscellaneous/ndarray-abs#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::clip","type":0,"sectionRef":"#","url":"/api/mathematical-functions/miscellaneous/ndarray-clip","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::clip","url":"/api/mathematical-functions/miscellaneous/ndarray-clip#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sign","type":0,"sectionRef":"#","url":"/api/mathematical-functions/miscellaneous/ndarray-sign","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::sign","url":"/api/mathematical-functions/miscellaneous/ndarray-sign#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sinc","type":0,"sectionRef":"#","url":"/api/mathematical-functions/miscellaneous/ndarray-sinc","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::sinc","url":"/api/mathematical-functions/miscellaneous/ndarray-sinc#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sqrt","type":0,"sectionRef":"#","url":"/api/mathematical-functions/miscellaneous/ndarray-sqrt","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::sqrt","url":"/api/mathematical-functions/miscellaneous/ndarray-sqrt#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::square","type":0,"sectionRef":"#","url":"/api/mathematical-functions/miscellaneous/ndarray-square","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::square","url":"/api/mathematical-functions/miscellaneous/ndarray-square#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::ceil","type":0,"sectionRef":"#","url":"/api/mathematical-functions/rounding/ndarray-ceil","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::ceil","url":"/api/mathematical-functions/rounding/ndarray-ceil#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::fix","type":0,"sectionRef":"#","url":"/api/mathematical-functions/rounding/ndarray-fix","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::fix","url":"/api/mathematical-functions/rounding/ndarray-fix#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::floor","type":0,"sectionRef":"#","url":"/api/mathematical-functions/rounding/ndarray-floor","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::floor","url":"/api/mathematical-functions/rounding/ndarray-floor#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::rint","type":0,"sectionRef":"#","url":"/api/mathematical-functions/rounding/ndarray-rint","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::rint","url":"/api/mathematical-functions/rounding/ndarray-rint#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::round","type":0,"sectionRef":"#","url":"/api/mathematical-functions/rounding/ndarray-round","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::round","url":"/api/mathematical-functions/rounding/ndarray-round#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::trunc","type":0,"sectionRef":"#","url":"/api/mathematical-functions/rounding/ndarray-trunc","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::trunc","url":"/api/mathematical-functions/rounding/ndarray-trunc#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sum","type":0,"sectionRef":"#","url":"/api/mathematical-functions/sum-products-differences/ndarray-sum","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::sum","url":"/api/mathematical-functions/sum-products-differences/ndarray-sum#parameters","content":""},{"title":"$a​","type":1,"pageTitle":"NDArray::sum","url":"/api/mathematical-functions/sum-products-differences/ndarray-sum#a","content":"Type NDArray|array The input array. "},{"title":"$axis​","type":1,"pageTitle":"NDArray::sum","url":"/api/mathematical-functions/sum-products-differences/ndarray-sum#axis","content":"Type long Specifies the axis along which the sum is performed. By default, (axis=NULL), the function sums all elements of the input array.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::sum","url":"/api/mathematical-functions/sum-products-differences/ndarray-sum#return","content":"Type - NDArray double The function returns the summed array along the specified axis, resulting in an array with the same shape as the input array, but with the specified axis removed. If the input array is 0-dimensional or if axis=NULL, a scalar value is returned.  "},{"title":"Notes​","type":1,"pageTitle":"NDArray::sum","url":"/api/mathematical-functions/sum-products-differences/ndarray-sum#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::prod","type":0,"sectionRef":"#","url":"/api/mathematical-functions/sum-products-differences/ndarray-prod","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"NDArray::prod","url":"/api/mathematical-functions/sum-products-differences/ndarray-prod#parameters","content":""},{"title":"$a​","type":1,"pageTitle":"NDArray::prod","url":"/api/mathematical-functions/sum-products-differences/ndarray-prod#a","content":"Type - NDArray|array|scalarInput array "},{"title":"$axis​","type":1,"pageTitle":"NDArray::prod","url":"/api/mathematical-functions/sum-products-differences/ndarray-prod#axis","content":"Type - NDArray|array|scalarThe axis to perform the product. If $axis is NULL, will calculate the product of all the elements of $a.  "},{"title":"Return​","type":1,"pageTitle":"NDArray::prod","url":"/api/mathematical-functions/sum-products-differences/ndarray-prod#return","content":""},{"title":"NDArray​","type":1,"pageTitle":"NDArray::prod","url":"/api/mathematical-functions/sum-products-differences/ndarray-prod#ndarray","content":"The product of $a. If $axis is not NULL, the specified axis is removed.  "},{"title":"Examples​","type":1,"pageTitle":"NDArray::prod","url":"/api/mathematical-functions/sum-products-differences/ndarray-prod#examples","content":"Example 1Example 2Example 3 use \\NDArray as nd; $a = new nd([[1, 2], [3, 4]]); $c = nd::prod($a); print_r($c); 24  "},{"title":"NDArray::arccos","type":0,"sectionRef":"#","url":"/api/mathematical-functions/trigonometric/ndarray-arccos","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arccos","url":"/api/mathematical-functions/trigonometric/ndarray-arccos#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::arcsin","type":0,"sectionRef":"#","url":"/api/mathematical-functions/trigonometric/ndarray-arcsin","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arcsin","url":"/api/mathematical-functions/trigonometric/ndarray-arcsin#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::arctan","type":0,"sectionRef":"#","url":"/api/mathematical-functions/trigonometric/ndarray-arctan","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::arctan","url":"/api/mathematical-functions/trigonometric/ndarray-arctan#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::cos","type":0,"sectionRef":"#","url":"/api/mathematical-functions/trigonometric/ndarray-cos","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::cos","url":"/api/mathematical-functions/trigonometric/ndarray-cos#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::degrees","type":0,"sectionRef":"#","url":"/api/mathematical-functions/trigonometric/ndarray-degrees","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::degrees","url":"/api/mathematical-functions/trigonometric/ndarray-degrees#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::radians","type":0,"sectionRef":"#","url":"/api/mathematical-functions/trigonometric/ndarray-radians","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::radians","url":"/api/mathematical-functions/trigonometric/ndarray-radians#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::sin","type":0,"sectionRef":"#","url":"/api/mathematical-functions/trigonometric/ndarray-sin","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::sin","url":"/api/mathematical-functions/trigonometric/ndarray-sin#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::normal","type":0,"sectionRef":"#","url":"/api/random/ndarray-normal","content":"NDArray::normal public static function normal(array $size, scalar $loc = 0.0, scalar $scale = 1.0): NDArray; Generates an array of random numbers from a normal distribution. The normal distribution, also known as the Gaussian distribution, is a continuous probability distribution that is symmetric and bell-shaped","keywords":""},{"title":"NDArray::tan","type":0,"sectionRef":"#","url":"/api/mathematical-functions/trigonometric/ndarray-tan","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::tan","url":"/api/mathematical-functions/trigonometric/ndarray-tan#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::poisson","type":0,"sectionRef":"#","url":"/api/random/ndarray-poisson","content":"NDArray::poisson public static function poisson(array $size, scalar $lam = 1.0): NDArray; Generates an array of random integers from a Poisson distribution. The Poisson distribution models the number of events occurring in fixed intervals of time or space, given the average rate of occurrence.","keywords":""},{"title":"NDArray::uniform","type":0,"sectionRef":"#","url":"/api/random/ndarray-uniform","content":"NDArray::uniform public static function uniform(array $size, scalar $low = 0.0, scalar $high = 1.0): NDArray; Generates an array of random numbers from a uniform distribution. The uniform distribution provides an equal probability for each value within a specified range.","keywords":""},{"title":"NDArray::average","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-average","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::average","url":"/api/statistics/ndarray-average#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::standard_normal","type":0,"sectionRef":"#","url":"/api/random/ndarray-standard_normal","content":"NDArray::standard_normal public static function standard_normal(array $size): NDArray; Generates an array of random numbers from the standard normal distribution. The standard normal distribution is a special case of the normal distribution with mean (μ) equal to 0 and standard deviation (σ) equal to 1.","keywords":""},{"title":"NDArray::median","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-median","content":"NDArray::median public static function median(NDArray|array|scalar $a): double; The median of the elements in the array. It sorts the array, and if the number of elements is odd, it returns the middle value; if the number of elements is even, it returns the average of the two middle values","keywords":""},{"title":"NDArray::mean","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-mean","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::mean","url":"/api/statistics/ndarray-mean#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::quantile","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-quantile","content":"NDArray::quantile public static function quantile(NDArray|array|scalar $a, scalar $q): double; Computes the specified quantile of the elements in the array. A quantile represents a particular value below which a given percentage of data falls. For example, the median is the 50th quantile.","keywords":""},{"title":"NDArray::std","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-std","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::std","url":"/api/statistics/ndarray-std#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"NDArray::variance","type":0,"sectionRef":"#","url":"/api/statistics/ndarray-variance","content":"","keywords":""},{"title":"Notes​","type":1,"pageTitle":"NDArray::variance","url":"/api/statistics/ndarray-variance#notes","content":"tip GPU SUPPORTED​ This operation is supported by GPU (VRAM) and contains a custom CUDA kernel. "},{"title":"About NumPower","type":0,"sectionRef":"#","url":"/docs/intro","content":"About NumPower Inspired by NumPy, the NumPower library was created to provide the foundation for efficient scientific computing in PHP, as well as leverage the machine learning tools and libraries that already exist and can benefit from it. This C extension developed for PHP can be used to considerably speed up mathematical operations on large datasets and facilitate the manipulation, creation and operation of N-dimensional tensors.","keywords":""},{"title":"The NDArray Object","type":0,"sectionRef":"#","url":"/docs/ndarray","content":"","keywords":""},{"title":"Converting back to a PHP array​","type":1,"pageTitle":"The NDArray Object","url":"/docs/ndarray#converting-back-to-a-php-array","content":"To use your NDArray in other PHP libraries, you can convert your NDArrays to PHP arrays by calling the toArray method: &lt;?php $a = new NDArray([[1, 2], [3, 4]]); print_r($a-&gt;toArray());  Output Array ( [0] =&gt; Array ( [0] =&gt; 1 [1] =&gt; 2 ) [1] =&gt; Array ( [0] =&gt; 3 [1] =&gt; 4 ) )  "},{"title":"Single Precision Float​","type":1,"pageTitle":"The NDArray Object","url":"/docs/ndarray#single-precision-float","content":"Unlike the PHP runtime, which uses double precision, NDArrays use single precision floats by default. This significantly increases the speed of some operations and reduces RAM consumption by up to 2 times compared to an array using PHP arrays. On the other hand, remember that you will lose precision when converting a PHP array to an NDArray. This is generally not an issue for most use cases. "},{"title":"Multi-Type Support​","type":1,"pageTitle":"The NDArray Object","url":"/docs/ndarray#multi-type-support","content":"Currently the only supported type is the float32 type, however, NDArray has been developed internally to support multi-types in the future. We will work to implement support for other types. note We'll work on implementing smaller types like half precision floats first. "},{"title":"GPU Support","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/gpu","content":"","keywords":""},{"title":"Copy NDArray to GPU​","type":1,"pageTitle":"GPU Support","url":"/docs/tutorial-basics/gpu#copy-ndarray-to-gpu","content":"To copy an NDArray to your video card, just use the gpu() method. This method will return a new NDArray with the data copied to your VRAM. &lt;?php use \\NDArray as nd; $a = nd::ones([10, 10]); $a_gpu = $a-&gt;gpu();  In this example we create an NDArray with format (10, 10) full of one. Then we use the gpu() method to create a copy of this NDArray on the GPU. "},{"title":"Copy NDArray to CPU​","type":1,"pageTitle":"GPU Support","url":"/docs/tutorial-basics/gpu#copy-ndarray-to-cpu","content":"In most cases, you will want your NDArray stored in your RAM. To copy an NDArray that is stored in your VRAM (GPU) to your RAM (CPU), just use the cpu() method. &lt;?php use \\NDArray as nd; $a = nd::ones([10, 10]); $a_gpu = $a-&gt;gpu(); // OPERATIONS $result = $a_gpu-&gt;cpu();  "},{"title":"GPU and CPU operations​","type":1,"pageTitle":"GPU Support","url":"/docs/tutorial-basics/gpu#gpu-and-cpu-operations","content":"In operations involving more than one tensor, like NDArray::add, both tensors involved must be on the same device. Operations between arrays on different devices will raise an exception. In this first version of NumPower, we want the user to explicitly say where they want to store their data, so automatic copies between GPU and CPU are not available. danger Some GPU-incompatible operations may raise an exception. In these cases the user must copy the tensor to the CPU manually using the appropriate method. "},{"title":"Broadcast","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/broadcast","content":"","keywords":""},{"title":"Scalar Broadcast​","type":1,"pageTitle":"Broadcast","url":"/docs/tutorial-basics/broadcast#scalar-broadcast","content":"Arithmetic operations involving an NDArray and a scalar value are always valid. In this case, the scalar will be &quot;expanded&quot; to the same dimensions as the NDArray. use \\NDArray as nd; // Create a matrix $array = nd::array([[1, 2], [3, 4]]); $result = $array * 2; // same as nd::multiply($array, 2); // Element-wise multiplication of $array * 2 // Same as nd:multiply($array, [[2, 2], [2, 2]]); print_r($result);  Output [[2, 4], [6, 8]]  "},{"title":"General Broadcast​","type":1,"pageTitle":"Broadcast","url":"/docs/tutorial-basics/broadcast#general-broadcast","content":"In some cases, when the format of matrices is aligned, it is also possible to perform arithmetic operations with matrices of different formats and dimensionality. Example 1​ use \\NDArray as nd; $a = nd::array( [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ); $result = $a * [1, 2, 3]; echo $result;  Output [[1, 4, 9] [4, 10, 18] [7, 16, 27]]  Example 2​ use \\NDArray as nd; $a = nd::array( [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ); $result = $a * [[1], [2], [3]]; echo $result;  Output [[1, 2, 3] [8, 10, 12] [21, 24, 27]]  "},{"title":"Iterating","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/iterating-ndarray","content":"Iterating NDArray does implement the Traversable interface. You can iterate over an NDArray as you would a PHP array. &lt;?php $a = new NDArray([[1, 2], [3, 4]]); foreach($a as $row) { echo(&quot;\\nRow\\n&quot;); print_r($row); } Output Row [1, 2] Row [3, 4] When you iterate, slice or reshape an NDArray, NumPower will share the same data buffer as the original array, avoiding copies and memory I/O, reducing RAM consumption. In some cases a copy may be made automatically. note Iterating over NDArray is not faster than iterating over a PHP array. Mathematical operations with NDArrays are faster when using one of the methods available in NumPower.","keywords":""},{"title":"Indexing & Slicing","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/ndarray-indexing","content":"","keywords":""},{"title":"Indexing​","type":1,"pageTitle":"Indexing & Slicing","url":"/docs/tutorial-basics/ndarray-indexing#indexing","content":"Indexing on the NDArray can be treated exactly like a standard array, with a few extras that we'll see next. The simplest way to set and return a value from an NDArray is through the standard PHP indexer. NDArray implements the ArrayAcess PHP interface. &lt;?php use \\NDArray as nd; $a = nd::zeros([10, 10]); // Initialize NDArray of shape (10, 10) full of zeros echo $a[0][0]; // Get echo &quot;\\n&quot;; $a[0][0] = 1; // Set echo $a[0][0]; // Get  Output 0 1  note The __offsetGet() method will return a slice of the root NDArray, a memory copy will only be made if the slice in question is changed. "},{"title":"Slicing​","type":1,"pageTitle":"Indexing & Slicing","url":"/docs/tutorial-basics/ndarray-indexing#slicing","content":"Python-inspired slicing can be used with NDArrays by calling the slice() method of any NDArray object. The slice is applied per dimension, and each tuple used as an argument represents the slice of a dimension. &lt;?php use \\NDArray as nd; // Create a matrix $array = nd::array([[1, 2], [3, 4]]); // Slice the second column of $array // // The first tuple [] represents ALL rows // The second tuple [1, 2] represents start: 1, stop: 2 and step: 1 (default) $second_column = $array-&gt;slice([], [1, 2]); print_r($second_column);  Output [[2], [4]]  note Negative values ​​for start, stop and step are not supported yet, but are in the roadmap. danger Although print_r works with the NDArray object, other PHP standard library array methods like array_column are not compatible with NDArrays. "},{"title":"NDArray Creation","type":0,"sectionRef":"#","url":"/docs/tutorial-basics/ndarray-creation","content":"","keywords":""},{"title":"Convert PHP Array to NDArray​","type":1,"pageTitle":"NDArray Creation","url":"/docs/tutorial-basics/ndarray-creation#convert-php-array-to-ndarray","content":"In the example below we will create a matrix of size 2 x 2 from an array in PHP use \\NDArray as nd; $ndarray = new nd([[1, 2], [3, 4]]);  "},{"title":"Creating NDArray with initializers​","type":1,"pageTitle":"NDArray Creation","url":"/docs/tutorial-basics/ndarray-creation#creating-ndarray-with-initializers","content":"You can also use one of several available initialization methods, below we will initialize a 2 x 4 x 4 NDArrayfull of ones. &lt;?php use \\NDArray as nd; $ndarray = nd::ones([2, 4, 4]); print_r($ndarray);  Output [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]]  "},{"title":"Creating NDArray with an image​","type":1,"pageTitle":"NDArray Creation","url":"/docs/tutorial-basics/ndarray-creation#creating-ndarray-with-an-image","content":"If you want to work with images, NumPower offers a quick way to perform image processing. You can initialize an NDArray from a GD image: &lt;?php use \\NDArray as nd; // Use GD to load the image $originalImage = imagecreatefromjpeg('test_img.jpg'); // Initialize our GD image (1200x1920) NDArray $image_array = nd::array($originalImage); print_r($image_array-&gt;shape());  Output Array ( [0] =&gt; 3 [1] =&gt; 1200 [2] =&gt; 1920 )  note For now, all images are processed in RGB format, we will work to implement other formats like CMYK and ARGB. "},{"title":"Docker Image","type":0,"sectionRef":"#","url":"/install/docker-install","content":"Docker Image If you prefer a hassle-free installation process, you can use a pre-built Docker image that includes NumPower and its dependencies. The Docker image provides a convenient and isolated environment to run your PHP code with NumPower already installed. To install NumPower using the Docker image, follow these steps: Install Docker on your system by following the instructions provided by Docker for your operating system. Pull the NumPower Docker image from the Docker Hub by running the following command in your terminal or command prompt: docker pull numpower/numpower:ubuntu-php82 For GPU support with CUDA, use the image: docker pull numpower/numpower:ubuntu-php82-cuda Once the image is downloaded, you can run your PHP code with NumPower by executing the following command in your terminal or command prompt: CPU Run​ docker run -it --rm -v /path/to/your/code:/app numpower/numpower:ubuntu-php82 php /app/your-script.php GPU Run​ Make sure you have nvidia-container-toolkit installed and that your docker is configured and ready to use the GPU docker run --gpus all -it --rm -v /path/to/your/code:/app numpower/numpower:ubuntu-php82-cuda php /app/your-script.php Replace /path/to/your/code with the path to your PHP code on the host machine. Also, replace your-script.php with the name of your PHP script that uses NumPower. This command mounts your local code directory into the Docker container and runs the PHP script with NumPower. Using the Docker image provides a convenient way to start using NumPower without worrying about the compilation process. However, if you prefer to compile NumPower from the source, continue reading for the alternative method.","keywords":""},{"title":"Compiling from source","type":0,"sectionRef":"#","url":"/install/from-source","content":"","keywords":""},{"title":"Requirements​","type":1,"pageTitle":"Compiling from source","url":"/install/from-source#requirements","content":"Before installing NumPower, ensure that your system meets the following requirements: PHP development files and header files. This may vary based on your operating system. Consult your system's package manager or PHP documentation for specific instructions.C++ compiler with C++11 support (such as GCC or Clang).CBLAS: CBLAS library (for CPU-based linear algebra operations)LAPACKE: LAPACKE library (for advanced linear algebra operations) Optional requirements (for enhanced performance and additional functionalities): CUBLAS: NVIDIA CUDA Toolkit with CUBLAS library (for GPU-accelerated linear algebra operations)CUDA development toolkit (NVCC) and the necessary CUDA header files "},{"title":"Compiling​","type":1,"pageTitle":"Compiling from source","url":"/install/from-source#compiling","content":"Clone the NumPower source code repository from the official GitHub repository to your local machine. Build and compile the PHP extension by running the appropriate commands specific to your environment. "},{"title":"CPU Compile​","type":1,"pageTitle":"Compiling from source","url":"/install/from-source#cpu-compile","content":"$ phpize $ ./configure $ make $ make install  "},{"title":"GPU Compile​","type":1,"pageTitle":"Compiling from source","url":"/install/from-source#gpu-compile","content":"For now, when using the build with GPU support, AVX2 will be disabled even when available (due to a limitation of NVCC itself) so some CPU operations may be slower. We are studying a way to mix NVCC and GCC to use both technologies simultaneously. $ phpize $ ./configure --with-cuda $ make install-cuda  Once the compilation is complete, you will obtain a compiled PHP extension file. If necessary, copy the compiled extension file to the appropriate location in your PHP extensions directory. Update your PHP configuration file (php.ini) to include the extension entry for NumPower. Add the following line to the php.ini file: extension=ndarray.so  "},{"title":"Installing NumPower","type":0,"sectionRef":"#","url":"/install/install","content":"Installing NumPower danger The NumPower library does not have a release and is in preview. This was done so that more people can test and report problems. We do not recommend using this library in production environments in its current state. Memory errors like overflow, leaks and unpredictable values ​​can happen. Please! Help us by reporting bugs in our official repository https://github.com/NumPower/numpower This page provides instructions for installing NumPower, a powerful numerical computing library for PHP inspired by the functionality of NumPy in Python. NumPower enables efficient array operations, mathematical functions, and tools for manipulating and analyzing numerical data in PHP. NumPower is implemented as a PHP extension, which requires a compilation process to install it in your PHP environment. There are two methods for installing NumPower: using a Docker image or compiling the extension from the source.","keywords":""}]