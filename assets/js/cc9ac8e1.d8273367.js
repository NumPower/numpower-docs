"use strict";(self.webpackChunknumpower=self.webpackChunknumpower||[]).push([[8189],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),c=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),m=n,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return a?r.createElement(f,s(s({ref:t},p),{},{components:a})):r.createElement(f,s({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:n,s[1]=l;for(var c=2;c<o;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8536:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const o={},s="Broadcast",l={unversionedId:"tutorial-basics/broadcast",id:"tutorial-basics/broadcast",title:"Broadcast",description:"We are working to support broadcast, which means that arithmetic operations between NDArrays of different dimensions",source:"@site/docs/tutorial-basics/3-broadcast.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/broadcast",permalink:"/docs/tutorial-basics/broadcast",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/3-broadcast.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Iterating",permalink:"/docs/tutorial-basics/iterating-ndarray"},next:{title:"GPU Support",permalink:"/docs/tutorial-basics/gpu"}},i={},c=[{value:"Scalar Broadcast",id:"scalar-broadcast",level:2},{value:"General Broadcast",id:"general-broadcast",level:2},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4}],p={toc:c},u="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"broadcast"},"Broadcast"),(0,n.kt)("p",null,"We are working to support broadcast, which means that arithmetic operations between NDArrays of different dimensions\ncan be used."),(0,n.kt)("p",null,"There are some rules for this to be valid, below we will only deal with the cases currently implemented, but remember\nthat this is a preview and will be updated to support several different shapes."),(0,n.kt)("h2",{id:"scalar-broadcast"},"Scalar Broadcast"),(0,n.kt)("p",null,'Arithmetic operations involving an NDArray and a scalar value are always valid. In this case, the scalar\nwill be "expanded" to the same dimensions as the NDArray.'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use \\NDArray as nd;\n\n// Create a matrix\n$array = nd::array([[1, 2], [3, 4]]);\n\n$result = $array * 2; // same as nd::multiply($array, 2);\n\n// Element-wise multiplication of $array * 2\n// Same as nd:multiply($array, [[2, 2], [2, 2]]);\nprint_r($result);\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php",metastring:'@title="Output"',"@title":'"Output"'},"[[2, 4],\n [6, 8]]\n")),(0,n.kt)("h2",{id:"general-broadcast"},"General Broadcast"),(0,n.kt)("p",null,"In some cases, when the format of matrices is aligned, it is also possible to perform\narithmetic operations with matrices of different formats and dimensionality."),(0,n.kt)("h4",{id:"example-1"},"Example 1"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use \\NDArray as nd;\n\n$a = nd::array(\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n);\n\n$result = $a * [1, 2, 3];\n\necho $result;\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php",metastring:'@title="Output"',"@title":'"Output"'},"[[1, 4, 9]\n [4, 10, 18]\n [7, 16, 27]]\n")),(0,n.kt)("h4",{id:"example-2"},"Example 2"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use \\NDArray as nd;\n\n$a = nd::array(\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n);\n\n$result = $a * [[1], [2], [3]];\n\necho $result;\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php",metastring:'@title="Output"',"@title":'"Output"'},"[[1, 2, 3]\n [8, 10, 12]\n [21, 24, 27]]\n")))}d.isMDXComponent=!0}}]);