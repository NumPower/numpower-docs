"use strict";(self.webpackChunknumpower=self.webpackChunknumpower||[]).push([[4273],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>d});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(t),m=a,d=c["".concat(l,".").concat(m)]||c[m]||y[m]||o;return t?n.createElement(d,i(i({ref:r},u),{},{components:t})):n.createElement(d,i({ref:r},u))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var p={};for(var l in r)hasOwnProperty.call(r,l)&&(p[l]=r[l]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},27309:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=t(87462),a=(t(67294),t(3905));const o={},i="The NDArray Object",p={unversionedId:"ndarray",id:"ndarray",title:"The NDArray Object",description:"Our library implements the NDArray object, this object works like an Array and is the object used by default",source:"@site/docs/1-ndarray.md",sourceDirName:".",slug:"/ndarray",permalink:"/numpower-docs/docs/ndarray",draft:!1,editUrl:"https://github.com/NumPower/numpower-docs/docs/1-ndarray.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"About NumPower",permalink:"/numpower-docs/docs/intro"},next:{title:"Image Processing",permalink:"/numpower-docs/docs/image-processing"}},l={},s=[{value:"Converting back to a PHP array",id:"converting-back-to-a-php-array",level:2},{value:"Single Precision Float",id:"single-precision-float",level:2},{value:"Multi-Type Support",id:"multi-type-support",level:2}],u={toc:s},c="wrapper";function y(e){let{components:r,...t}=e;return(0,a.kt)(c,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-ndarray-object"},"The NDArray Object"),(0,a.kt)("p",null,"Our library implements the ",(0,a.kt)("inlineCode",{parentName:"p"},"NDArray")," object, this object works like an Array and is the object used by default\nin the arguments of NumPower operations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nuse \\NDArray as nd;\n\n$a = nd::array([[1, 2], [3, 4]]);\nprint_r($a); // or echo $a;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'@title="Output"',"@title":'"Output"'},"[[1, 2],\n [3, 4]]\n")),(0,a.kt)("h2",{id:"converting-back-to-a-php-array"},"Converting back to a PHP array"),(0,a.kt)("p",null,"To use your NDArray in other PHP libraries, you can convert your NDArrays to PHP arrays by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"toArray")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n$a = new NDArray([[1, 2], [3, 4]]);\nprint_r($a->toArray());\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'@title="Output"',"@title":'"Output"'},"Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n\n    [1] => Array\n        (\n            [0] => 3\n            [1] => 4\n        )\n\n)\n")),(0,a.kt)("h2",{id:"single-precision-float"},"Single Precision Float"),(0,a.kt)("p",null,"Unlike the PHP runtime, which uses double precision, NDArrays use single precision floats by default.\nThis significantly increases the speed of some operations and reduces RAM consumption by up to 2 times compared to\nan array using PHP arrays."),(0,a.kt)("p",null,"On the other hand, remember that you will lose precision when converting a PHP array to an NDArray.\nThis is generally not an issue for most use cases."),(0,a.kt)("h2",{id:"multi-type-support"},"Multi-Type Support"),(0,a.kt)("p",null,"Currently the only supported type is the ",(0,a.kt)("inlineCode",{parentName:"p"},"float32")," type, however, NDArray has been developed internally to support multi-types\nin the future. We will work to implement support for other types."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"We'll work on implementing smaller types like half precision floats first.")))}y.isMDXComponent=!0}}]);