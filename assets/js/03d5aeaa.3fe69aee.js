"use strict";(self.webpackChunknumpower=self.webpackChunknumpower||[]).push([[6171],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(n),g=a,f=u["".concat(l,".").concat(g)]||u[g]||c[g]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1082:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));const o={},i="Image Processing",s={unversionedId:"image-processing",id:"image-processing",title:"Image Processing",description:"When NumPower is compiled in an environment with PHP-GD available, functions to facilitate",source:"@site/docs/2-image-processing.mdx",sourceDirName:".",slug:"/image-processing",permalink:"/docs/image-processing",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2-image-processing.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The NDArray Object",permalink:"/docs/ndarray"},next:{title:"Fundamentals",permalink:"/docs/category/fundamentals"}},l={},m=[{value:"NumPower Image Tools",id:"numpower-image-tools",level:2}],p={toc:m},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"image-processing"},"Image Processing"),(0,a.kt)("p",null,"When NumPower is compiled in an environment with PHP-GD available, functions to facilitate\nimage manipulation will be available for use."),(0,a.kt)("p",null,"You can use a ",(0,a.kt)("inlineCode",{parentName:"p"},"GdImage")," image to build an NDArray or as an argument for the different types of operations\navailable, making image processing fast and with the possibility of performing image processing using a GPU."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'use \\NDArray as nd;\n\n$gd_image = imagecreatefromjpeg("test_img.jpg");\n\n$gd_image_array = nd:array($gd_image);\n')),(0,a.kt)("h2",{id:"numpower-image-tools"},"NumPower Image Tools"),(0,a.kt)("p",null,"We are creating a library for processing images with CPU and GPU using the NumPower extension and PHP-GD.\nTo install the library just use the command below in an environment with composer installed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"composer require numpower/image\n")),(0,a.kt)("p",null,"For now you can create RGB Images and perform some filters, we will work to create more methods and features for image manipulation."),(0,a.kt)("p",null,"If you are an enthusiast and want to help, help us at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/NumPower/numpower-image"},"https://github.com/NumPower/numpower-image")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'use NumPower\\Image\\ImageRGB;\n\n$img = new ImageRGB("test_img.jpg", use_gpu: True); // Set $use_gpu to False for CPU computation\n\n$img->emboss(intensity: 2);\n$img->sobelHorizontal();\n\n$img->save("out.jpg");\n')))}c.isMDXComponent=!0}}]);