"use strict";(self.webpackChunknumpower=self.webpackChunknumpower||[]).push([[1587],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(r),f=o,d=c["".concat(p,".").concat(f)]||c[f]||m[f]||i;return r?n.createElement(d,a(a({ref:t},s),{},{components:r})):n.createElement(d,a({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},8158:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const i={},a="Compiling from source",l={unversionedId:"from-source",id:"from-source",title:"Compiling from source",description:"Compiling NumPower from the source allows you to customize the installation and optimize it for your specific",source:"@site/install/2-from-source.mdx",sourceDirName:".",slug:"/from-source",permalink:"/install/from-source",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"community",previous:{title:"Docker Image",permalink:"/install/docker-install"}},p={},u=[{value:"Requirements",id:"requirements",level:2},{value:"Compiling",id:"compiling",level:2}],s={toc:u},c="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"compiling-from-source"},"Compiling from source"),(0,o.kt)("p",null,"Compiling NumPower from the source allows you to customize the installation and optimize it for your specific\nenvironment. This method requires more manual steps but provides flexibility and control over the installation process."),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("p",null,"Before installing NumPower, ensure that your system meets the following requirements:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"PHP development files and header files. This may vary based on your operating system.\nConsult your system's package manager or PHP documentation for specific instructions."),(0,o.kt)("li",{parentName:"ul"},"C++ compiler with C++11 support (such as GCC or Clang).")),(0,o.kt)("p",null,"Optional requirements (for enhanced performance and additional functionalities):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"CUBLAS"),": NVIDIA CUDA Toolkit with CUBLAS library (for GPU-accelerated linear algebra operations)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"CBLAS"),": CBLAS library (for CPU-based linear algebra operations)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"LAPACKE"),": LAPACKE library (for advanced linear algebra operations)")),(0,o.kt)("h2",{id:"compiling"},"Compiling"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Clone the NumPower source code repository from the official GitHub repository to your local machine.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Build and compile the PHP extension by running the appropriate commands specific to your environment."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ phpize\n$ ./configure\n$ make\n$ make install\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Once the compilation is complete, you will obtain a compiled PHP extension file. If necessary, copy the compiled\nextension file to the appropriate location in your PHP extensions directory.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Update your PHP configuration file (php.ini) to include the extension entry for NumPower.\nAdd the following line to the ",(0,o.kt)("inlineCode",{parentName:"p"},"php.ini")," file:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini"},"extension=ndarray.so\n")))}m.isMDXComponent=!0}}]);