"use strict";(self.webpackChunknumpower=self.webpackChunknumpower||[]).push([[9739],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>y});var a=n(7294);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,a,t=function(e,r){if(null==e)return{};var n,a,t={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=a.createContext({}),p=function(e){var r=a.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},c=function(e){var r=p(e.components);return a.createElement(s.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},d=a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=t,y=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(y,o(o({ref:r},c),{},{components:n})):a.createElement(y,o({ref:r},c))}));function y(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:t,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3313:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),t=(n(7294),n(3905));const i={},o="NDArray Creation",l={unversionedId:"tutorial-basics/ndarray-creation",id:"tutorial-basics/ndarray-creation",title:"NDArray Creation",description:"You can create an NDArray using one of the following ways:",source:"@site/docs/tutorial-basics/0-ndarray-creation.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/ndarray-creation",permalink:"/docs/tutorial-basics/ndarray-creation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/0-ndarray-creation.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Fundamentals",permalink:"/docs/category/fundamentals"},next:{title:"Indexing & Slicing",permalink:"/docs/tutorial-basics/ndarray-indexing"}},s={},p=[{value:"Convert PHP Array to NDArray",id:"convert-php-array-to-ndarray",level:2},{value:"Using initializers",id:"using-initializers",level:2},{value:"Creating NDArray from an image",id:"creating-ndarray-from-an-image",level:2}],c={toc:p},u="wrapper";function m(e){let{components:r,...n}=e;return(0,t.kt)(u,(0,a.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"ndarray-creation"},"NDArray Creation"),(0,t.kt)("p",null,"You can create an NDArray using one of the following ways:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"From a PHP array"),(0,t.kt)("li",{parentName:"ul"},"Using one of the initialization methods like ",(0,t.kt)("inlineCode",{parentName:"li"},"NDArray::ones")),(0,t.kt)("li",{parentName:"ul"},"From a GD image")),(0,t.kt)("h2",{id:"convert-php-array-to-ndarray"},"Convert PHP Array to NDArray"),(0,t.kt)("p",null,"In the example below we will create a matrix of size ",(0,t.kt)("inlineCode",{parentName:"p"},"2 x 2")," from an array in PHP"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"use \\NDArray as nd;\n\n$ndarray = new nd([[1, 2], [3, 4]]);\n")),(0,t.kt)("admonition",{type:"note"},(0,t.kt)("h4",{parentName:"admonition",id:"boolean-casting"},"Boolean casting"),(0,t.kt)("p",{parentName:"admonition"},"Boolean values in a PHP array will be converted to floats during initialization")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"using-initializers"},"Using initializers"),(0,t.kt)("p",null,"You can also use one of several available initialization methods, below we will initialize a ",(0,t.kt)("inlineCode",{parentName:"p"},"2 x 4 x 4")," ",(0,t.kt)("inlineCode",{parentName:"p"},"NDArray"),"\nfull of ones."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nuse \\NDArray as nd;\n\n$ndarray = nd::ones([2, 4, 4]);\nprint_r($ndarray);\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php",metastring:'@title="Output"',"@title":'"Output"'},"[[[1, 1, 1, 1],\n  [1, 1, 1, 1],\n  [1, 1, 1, 1],\n  [1, 1, 1, 1]],\n [[1, 1, 1, 1],\n  [1, 1, 1, 1],\n  [1, 1, 1, 1],\n  [1, 1, 1, 1]]]\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"creating-ndarray-from-an-image"},"Creating NDArray from an image"),(0,t.kt)("p",null,"If you want to work with images, NumPower offers a quick way to perform image processing.\nYou can initialize an NDArray from a GD image:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nuse \\NDArray as nd;\n\n// Use GD to load the image\n$originalImage = imagecreatefromjpeg('test_img.jpg');\n\n// Initialize our GD image (1200x1920) NDArray\n$image_array = nd::array($originalImage);\nprint_r($image_array->shape());\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php",metastring:'@title="Output"',"@title":'"Output"'},"Array\n(\n    [0] => 3\n    [1] => 1200\n    [2] => 1920\n)\n")),(0,t.kt)("admonition",{type:"note"},(0,t.kt)("p",{parentName:"admonition"},"For now, all images are processed in RGB format,\nwe will work to implement other formats like CMYK and ARGB.")),(0,t.kt)("hr",null))}m.isMDXComponent=!0}}]);